generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Author {
  id          Int     @id @default(autoincrement())
  name        String @unique
  website     String?
  group       String?
  profile     String?
  masterpiece String?
  posts       Post[]
  authorTwitter String?
  groupTwitter String?

  @@map("Author")
}

model Post {
  id                  Int             @id @default(autoincrement())
  title               String
  content             String?
  author_id           Int
  man                 Int?
  woman               Int?
  others              Int?
  totalNumber         Int?
  playtime            Int?
  synopsis            String?
  image_url           String?
  amazon_text_url     String?
  amazon_img_url      String?
  amazon_img_text_url String?
  link_to_plot        String?
  website1            String?
  website2            String?
  website3            String?
  ISBN_13             String?
  buy_link            String?
  comments      ParentComment[]
  access              Access[]
  averageRating Float?
  ratings   Rating[]
  author              Author          @relation(fields: [author_id], references: [id])
  categories          Category[]      @relation("PostCategory")

  @@map("Post")
}

model Category {
  id    Int    @id @default(autoincrement())
  name  String @unique
  posts Post[] @relation("PostCategory")
  image_url String?
  contentMarkdown String?

  @@map("Category")
}

model News {
  id       Int      @id @default(autoincrement())
  date     DateTime @default(now())
  url      String?
  category String
  title    String

  @@map("News")
}

model Access {
  id        Int      @id @default(autoincrement())
  ipAddress String
  postId    Int
  date      DateTime @db.Date
  post      Post     @relation(fields: [postId], references: [id])

  @@unique([ipAddress, postId, date])
  @@map("Access")
}

model ParentComment {
  id       Int            @id @default(autoincrement())
  content  String
  deleted  Boolean        @default(false)
  post_id  Int
  author   String         @default("名無しさん")
  date     DateTime       @default(now())
  children ChildComment[]
  post     Post           @relation(fields: [post_id], references: [id])

  @@map("ParentComment")
}

model ChildComment {
  id              Int           @id @default(autoincrement())
  content         String
  deleted         Boolean       @default(false)
  parentCommentId Int
  author          String        @default("名無しさん")
  date            DateTime      @default(now())
  parentComment   ParentComment @relation(fields: [parentCommentId], references: [id])

  @@map("ChildComment")
}

model Rating {
  id        Int      @id @default(autoincrement())
  ipAddress String
  star      Float
  createdAt DateTime @default(now())
  postId    Int
  Post      Post     @relation(fields: [postId], references: [id])

  @@map("Rating")
}

model Announcement {
  id               Int      @id @default(autoincrement())
  title            String
  content          String
  performanceDate  DateTime?
  venue            String?
  ticketPrice      String?
  contactInfo      String?
  authorName       String   @default("名無しさん")
  ipAddress        String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  views            Int      @default(0)
  
  @@map("Announcement")
}